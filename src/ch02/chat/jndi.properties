#java.naming.security.principal=system
#java.naming.security.credentials=manager

#java.naming.security.principal=admin
#java.naming.security.credentials=admin



## From: http://activemq.apache.org/jndi-support.html
## ActiveMQ does not provide a full JNDI server. This means JMS clients
## need to use properties files to create a JNDI IntialContextFactory.
## ---------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
## 
## http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ---------------------------------------------------------------------------

# START SNIPPET: jndi

# Set the initial context factory class
# For ActiveMQ (Points to class in activemq-all-5.15.0.jar):
java.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory
# For GlassFish:
java.naming.factory.initial = com.sun.enterprise.naming.SerialInitContextFactory

# Set JMS provider URL to connect to JMS server
# use the following property to configure the default connector
# ref:http://activemq.apache.org/uri-protocols.html
# For ActiveMQ:
java.naming.provider.url = tcp://192.168.1.106:61616
# for GlassFish:
java.naming.provider.url = tcp://localhost:4848
# (tcp: Client connects to the broker at the given URL)


# Configure JMS-administered objects (Connection Factories, and Destinations
# (Topics/Queues))...
############################################################################

########################## Active MQ #######################################
# ActiveMQ only... (as defined by ActiveMQInitialContextFactory)
# ActiveMQ uses a single connection factory name for all destinations (topics and queues): ConnectionFactory
# You can either specify the above name, or...
# The following property can be used to specify custom JNDI name(s) the above connection factory should appear as:
# (i.e. you can use these names in your java JNDI lookups and they will alias "ConnectionFactory") 
connectionFactoryNames = connectionFactory, queueConnectionFactory, topicConnectionFactory

# Queues...
# register some queues as JNDI names in JNDI using the form:
# queue.[jndiName] = [Physical Destination Name]
#queue.MyQueue = example.MyQueue

# Topics...
# register some topics as JNDI names in JNDI using the form:
# topic.[jndiName] = [Physical Destination Name]
# (ActiveMQInitialContextFactory looks for properties begining with "topic.")
# For ActiveMQ:
topic.ActiveMQTopic = ActiveMQ.OReilly.JMS.Ch02.Topic
############################################################################

# For GlasshFish:
# I think GlassFish provides a JNDI Server in which the JNDI name for the topic is defined,
# so none needed in jndi.properties.

# END SNIPPET: jndi
